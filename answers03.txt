1. Какую ошибку я допустила в [этом](https://www.notion.so/23-CSS-React-d4b0b61bb697459aacb1681ba2764440?pvs=21) примере?  

пример
const myStyle = {
  width: 200,
  height: 50,
  fontSize: '1.5 em',
  backgroundColor: 'red',
};

const Button = () => (
  <button style={ myStyle }>Нажми меня</button>
)

В данном примере присутствует ошибка в значении свойства fontSize в объекте myStyle. Значение должно быть указано в виде строки с единицами измерения без пробела между числом и единицами измерения.

2. Какие есть способы работы со стилями в React?
инлайновая стилизация, таблицы стилей, CSS модули и препроцессоры;

3. Как будет выглядеть карточка товара, если ей передать атрибут `addedToCart`===0?
Если речь о карточке из урока, то 0 будет приведен к false и в карточке будет кнопка "заказать" 

4. Какие ещё проверки нужно было бы сделать для атрибута `addedToCart`?
можно проверить не является ли undefined, null, пустой строкой, является ли числом. 
Можно проверить, есть ли еще такой товар в наличии и сколько его, чтобы нельзя было ввести число больше чем количество в наличии.

5. Клиент попросил повесить тег «New» на товары из новой коллекции. Как это сделать, какой условный оператор выбрать?
передавать в пропс isNew (true или false), проверять его и если да, то добавлять элемент, также можно использовать логический оператор или тернарный оператор и проверять прямо в return

6. Какими тремя способами можно написать условный рендеринг?
If
Тернарный оператор
Логический оператор && 

7. Представьте, что вы пишете компонент логина. Если пользователь авторизован, то мы показываем его имя, а если нет, то даём возможность ввода логина и пароля. Какой код для этого нужно написать, если за авторизацию пользователя отвечает флаг isAutorized?
упрощенно: 
export function Login(props) {
	const {name, isAutorized } = props;
	return (
        <div>
           {isAutorized
                    ? (<div> {name} <div/>)
                    : (<input type="text"/><input type="password"/>)
                }
        </div>
    );
}

8. В чём преимущества использования препроцессоров? Какой ещё есть способ использовать переменные, кроме $ в препроцессорах?
примущества:
- разделение на небольшие файлы.
- использование модульного подхода - нет пересечения названий стилей;
- переменные - вынести общие цвета, размеры шрифта, брейкпоинты, отсупы и импортировать их в нужный файл;
- математические операции;
- вложения - не нужно повторять написание селектора, можно отграничить стилизацию элементов внутри родителя;
- амперсанд - не нужно повторять  родительский селектор, можно быстро менять его. Помогает сделать код читабельней.
- Миксины - правил стилизации, который можно использовать многократно.

Что касается использования переменных в препроцессоре, можно их разновидностями назвать амперсанд и миксины.
в реакт можно записать правила стилизации в переменную и использовать ее, а также можно использовать шаблонные строки.
также можно использовать CSS-in-JS библиотеки, такие как styled-components или emotion. Эти библиотеки позволяют определять стили внутри JavaScript-кода с использованием функций, которые позволяют создавать переменные и повторно использовать стили.
